import React from 'react';
import { Employee } from '../types';
import { CakeIcon, EmailIcon, CopyIcon } from './icons';

interface BirthdaySectionProps {
  employees: Employee[];
}

// *** C·∫§U H√åNH ***: Thay ƒë·ªïi ƒë·ªãa ch·ªâ email n√†y th√†nh email chung c·ªßa c√¥ng ty b·∫°n.
const TARGET_EMAIL = 'nhom.congty@example.com';

const formatDate = (dateString: string) => {
  const [_, month, day] = dateString.split('-');
  return `${day}/${month}`;
};

const BirthdayCard = ({ employee, highlightColor }: { employee: Employee, highlightColor: string }) => (
  <div className={`p-4 rounded-lg flex items-center space-x-4 ${highlightColor}`}>
    <img
      src={`https://picsum.photos/seed/${employee.id}/100`}
      alt={employee.name}
      className="w-12 h-12 rounded-full object-cover border-2 border-white"
    />
    <div>
      <p className="font-semibold text-gray-800">{employee.name}</p>
      <p className="text-sm text-gray-600">Sinh nh·∫≠t: {formatDate(employee.birthdate)}</p>
    </div>
  </div>
);

const BirthdaySection: React.FC<BirthdaySectionProps> = ({ employees }) => {
  const today = new Date();
  today.setHours(0, 0, 0, 0); // Normalize to the beginning of the day

  const tomorrow = new Date(today);
  tomorrow.setDate(today.getDate() + 1);

  const isBirthdayOnDate = (birthdate: string, targetDate: Date): boolean => {
    const [_, month, day] = birthdate.split('-').map(Number);
    return month === targetDate.getMonth() + 1 && day === targetDate.getDate();
  };

  const getUpcomingBirthdayDate = (birthdate: string): Date => {
    const [_, month, day] = birthdate.split('-').map(Number);
    let birthdayDate = new Date(today.getFullYear(), month - 1, day);
    if (birthdayDate < today) {
      birthdayDate.setFullYear(today.getFullYear() + 1);
    }
    return birthdayDate;
  };

  const birthdaysToday = employees.filter(e => isBirthdayOnDate(e.birthdate, today));
  const birthdaysTomorrow = employees.filter(e => isBirthdayOnDate(e.birthdate, tomorrow));
  
  const upcomingBirthdays3Days = employees.filter(e => {
    const birthdayDate = getUpcomingBirthdayDate(e.birthdate);
    const diffTime = birthdayDate.getTime() - today.getTime();
    const diffDays = diffTime / (1000 * 60 * 60 * 24);
    return diffDays > 0 && diffDays <= 3;
  });

  const upcomingBirthdays7Days = employees.filter(e => {
    const birthdayDate = getUpcomingBirthdayDate(e.birthdate);
    const diffTime = birthdayDate.getTime() - today.getTime();
    const diffDays = diffTime / (1000 * 60 * 60 * 24);
    return diffDays > 0 && diffDays <= 7;
  });

  const handleSendEmail = () => {
    if (birthdaysToday.length === 0) return;

    const names = birthdaysToday.map(e => e.name).join(', ');
    const subject = `Ch√∫c M·ª´ng Sinh Nh·∫≠t ${names}!`;

    const personalizedWishes = birthdaysToday
      .map(employee => `- Anh/Ch·ªã ${employee.name}, ${employee.position}.`)
      .join('\n');

    const emailBody = `Thay m·∫∑t anh ch·ªã em c√¥ng ty ABTRIP v√† c√¥ng ty An B√¨nh, xin g·ª≠i l·ªùi ch√∫c m·ª´ng sinh nh·∫≠t t·ªõi:\n\n${personalizedWishes}\n\nCh√∫c c√°c anh/ch·ªã m·ªôt ng√†y sinh nh·∫≠t th·∫≠t vui v·∫ª, √Ω nghƒ©a v√† m·ªôt tu·ªïi m·ªõi g·∫∑t h√°i nhi·ªÅu th√†nh c√¥ng!\n\nTr√¢n tr·ªçng.`;

    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(emailBody).then(() => {
            alert(
              'N·ªôi dung email ƒë√£ ƒë∆∞·ª£c sao ch√©p!\n\n' +
              'Vui l√≤ng m·ªü ·ª©ng d·ª•ng email c·ªßa b·∫°n v√† d√°n (paste) n·ªôi dung v√†o.\n\n' +
              `Ng∆∞·ªùi nh·∫≠n (To): ${TARGET_EMAIL}\n` +
              `Ch·ªß ƒë·ªÅ (Subject): ${subject}`
            );
        }).catch(err => {
            console.error('Kh√¥ng th·ªÉ sao ch√©p n·ªôi dung email: ', err);
            alert('L·ªói: Kh√¥ng th·ªÉ t·ª± ƒë·ªông sao ch√©p.');
        });
    } else {
        prompt(
          'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ t·ª± ƒë·ªông sao ch√©p. Vui l√≤ng sao ch√©p n·ªôi dung email d∆∞·ªõi ƒë√¢y:',
          emailBody
        );
    }
  };

  const handleCopyViberMessage = () => {
    if (birthdaysToday.length === 0) return;

    const viberPersonalizedWishes = birthdaysToday
        .map(employee => `- Anh/Ch·ªã ${employee.name} (${employee.position})`)
        .join('\n');
    
    const viberMessage = `üéâüéÇ Thay m·∫∑t c√¥ng ty ABTRIP v√† An B√¨nh, xin ch√∫c m·ª´ng sinh nh·∫≠t:\n${viberPersonalizedWishes}\nCh√∫c m·ªçi ng∆∞·ªùi tu·ªïi m·ªõi nhi·ªÅu ni·ªÅm vui, s·ª©c kh·ªèe v√† th√†nh c√¥ng! üéÇüéâ`;

    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(viberMessage).then(() => {
            alert(
              'L·ªùi ch√∫c Viber ƒë√£ ƒë∆∞·ª£c sao ch√©p!\n\n' +
              'Vui l√≤ng m·ªü Viber v√† d√°n (paste) v√†o nh√≥m chat c·ªßa b·∫°n.'
            );
        }).catch(err => {
            console.error('Kh√¥ng th·ªÉ sao ch√©p tin nh·∫Øn Viber: ', err);
             alert('L·ªói: Kh√¥ng th·ªÉ t·ª± ƒë·ªông sao ch√©p.');
        });
    } else {
        prompt(
          'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ t·ª± ƒë·ªông sao ch√©p. Vui l√≤ng sao ch√©p l·ªùi ch√∫c d∆∞·ªõi ƒë√¢y v√† d√°n v√†o Viber:',
          viberMessage
        );
    }
  };


  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
          <CakeIcon className="w-6 h-6 mr-2 text-pink-500" />
          Sinh nh·∫≠t H√¥m nay
        </h3>
        {birthdaysToday.length > 0 ? (
          <>
            <div className="space-y-3">
              {birthdaysToday.map(e => <BirthdayCard key={e.id} employee={e} highlightColor="bg-pink-100" />)}
            </div>
            <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-3">
                <button
                    onClick={handleSendEmail}
                    className="flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-transform transform hover:scale-105"
                >
                    <EmailIcon className="w-5 h-5" />
                    <span>So·∫°n Email</span>
                </button>
                 <button
                    onClick={handleCopyViberMessage}
                    className="flex items-center justify-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 transition-transform transform hover:scale-105"
                >
                    <CopyIcon className="w-5 h-5" />
                    <span>Copy L·ªùi ch√∫c Viber</span>
                </button>
            </div>
          </>
        ) : (
          <p className="text-gray-500">Kh√¥ng c√≥ sinh nh·∫≠t n√†o h√¥m nay.</p>
        )}
      </div>

      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
          <CakeIcon className="w-6 h-6 mr-2 text-blue-500" />
          Sinh nh·∫≠t Ng√†y mai
        </h3>
        {birthdaysTomorrow.length > 0 ? (
          <div className="space-y-3">
            {birthdaysTomorrow.map(e => <BirthdayCard key={e.id} employee={e} highlightColor="bg-blue-100" />)}
          </div>
        ) : (
          <p className="text-gray-500">Kh√¥ng c√≥ sinh nh·∫≠t n√†o v√†o ng√†y mai.</p>
        )}
      </div>

      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
          <CakeIcon className="w-6 h-6 mr-2 text-green-500" />
          Sinh nh·∫≠t trong 3 ng√†y t·ªõi
        </h3>
        {upcomingBirthdays3Days.length > 0 ? (
           <div className="space-y-3">
            {upcomingBirthdays3Days.map(e => <BirthdayCard key={e.id} employee={e} highlightColor="bg-green-100" />)}
          </div>
        ) : (
          <p className="text-gray-500">Kh√¥ng c√≥ sinh nh·∫≠t n√†o trong 3 ng√†y t·ªõi.</p>
        )}
      </div>

      <div className="bg-white rounded-xl shadow-lg p-6">
        <h3 className="text-xl font-bold text-gray-800 mb-4 flex items-center">
          <CakeIcon className="w-6 h-6 mr-2 text-yellow-500" />
          Sinh nh·∫≠t S·∫Øp t·ªõi (7 ng√†y)
        </h3>
        {upcomingBirthdays7Days.length > 0 ? (
           <div className="space-y-3">
            {upcomingBirthdays7Days.map(e => <BirthdayCard key={e.id} employee={e} highlightColor="bg-yellow-100" />)}
          </div>
        ) : (
          <p className="text-gray-500">Kh√¥ng c√≥ sinh nh·∫≠t n√†o s·∫Øp t·ªõi.</p>
        )}
      </div>
    </div>
  );
};

export default BirthdaySection;